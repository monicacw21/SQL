#Consider P1(a,c) and P2(b,d) to be two points on a 2D plane where (a,b) are the respective minimum and maximum values of Northern Latitude (LAT_N) and (c,d) 
are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.
Query the Euclidean Distance between points P1 and P2 and format your answer to display 4 decimal digits.

SELECT ROUND(sqrt(power(max(LAT_N) - min(LAT_N), 2) + power(max(LONG_W) - min(LONG_W), 2)), 4)
FROM STATION;

Output
184.1616

A median is defined as a number separating the higher half of a data set from the lower half. 
Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to 4 decimal places.
------------------------------------------------------------
MySQL =
SELECT ROUND(S1.LAT_N, 4) 
    FROM STATION AS S1 
    WHERE (SELECT ROUND(COUNT(S1.ID)/2) - 1 
           FROM STATION) = 
          (SELECT COUNT(S2.ID) 
           FROM STATION AS S2 
           WHERE S2.LAT_N > S1.LAT_N)
-------------------------------------------------------------
MS SQL = 
SELECT CAST(LAT_N AS DECIMAL (7,4))
FROM
    (SELECT LAT_N, ROW_NUMBER() OVER (ORDER BY LAT_N) as MLAT 
     FROM STATION) AS X
WHERE MLAT = (SELECT ROUND((COUNT(LAT_N)+1)/2,0) 
                FROM STATION);
------------------------------------------------------------
Oracle =
SELECT ROUND(MEDIAN(Lat_N), 4)
FROM Station;

Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. 
Ketty does not want the NAMES of those students who received a grade lower than 8. 
The report must be in descending order by grade -- i.e. higher grades are entered first. 
If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. 
Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order. 
If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.

SELECT IF(GRADE < 8, NULL, NAME), GRADE, MARKS
FROM STUDENTS JOIN GRADES
WHERE MARKS BETWEEN MIN_MARK AND MAX_MARK
ORDER BY GRADE DESC, NAME;

Output
Britney 10 95 
Heraldo 10 94 
Julia 10 96 
Kristeen 10 100 
Stuart 10 99 
Amina 9 89 
Christene 9 88 
Salma 9 81 
Samantha 9 87 
Scarlet 9 80
Vivek 9 84 
Aamina 8 77 
Belvet 8 78 
Paige 8 74 
Priya 8 76 
Priyanka 8 77  
NULL 7 64 
NULL 7 66 
NULL 6 55 
NULL 4 34 
NULL 3 24

Julia conducted a 15 days of learning SQL contest. The start date of the contest was March 01, 2016 and the end date was March 15, 2016.
Write a query to print total number of unique hackers who made at least 1 submission each day (starting on the first day of the contest), 
and find the hacker_id and name of the hacker who made maximum number of submissions each day. 
If more than one such hacker has a maximum number of submissions, print the lowest hacker_id. 
The query should print this information for each day of the contest, sorted by the date.

SELECT submission_date,
(SELECT COUNT(DISTINCT hacker_id) 
FROM submissions s2 
WHERE s2.submission_date = s1.submission_date AND
(SELECT COUNT(DISTINCT s3.submission_date) FROM submissions s3 WHERE s3.hacker_id = s2.hacker_id AND s3.submission_date < s1.submission_date) = DATEDIFF(s1.submission_date, "2016-03-01")),
(SELECT hacker_id FROM submissions s2 WHERE s2.submission_date = s1.submission_date
GROUP BY hacker_id ORDER BY COUNT(submission_id) DESC, hacker_id limit 1)AS TMP,
(SELECT name FROM hackers WHERE hacker_id = TMP)
FROM
(SELECT DISTINCT submission_date FROM submissions) s1
GROUP BY submission_date;

Output
2016-03-01 112 81314 Denise 
2016-03-02 59 39091 Ruby 
2016-03-03 51 18105 Roy 
2016-03-04 49 533 Patrick 
2016-03-05 49 7891 Stephanie 
2016-03-06 49 84307 Evelyn 
2016-03-07 35 80682 Deborah 
2016-03-08 35 10985 Timothy 
2016-03-09 35 31221 Susan 
2016-03-10 35 43192 Bobby 
2016-03-11 35 3178 Melissa 
2016-03-12 35 54967 Kenneth 
2016-03-13 35 30061 Julia 
2016-03-14 35 32353 Rose 
2016-03-15 35 27789 Helen 